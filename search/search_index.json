{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Modern API wrapper for Genshin Impact & Honkai Impact 3rd built on asyncio and pydantic . The primary focus of genshin.py is convenience. The entire project is fully type-hinted and abstracts a large amount of the api to be easier to use. Key features: All data is in the form of Pydantic Models which means full autocompletion and linter support. Requests are significantly faster thanks to proper usage of asyncio. Chinese and Engrish names returned by the API are renamed to simpler English fields. Supports the majority of the popular endpoints. Cleanly integrates with frameworks like FastAPI out of the box. Installation From PyPI: pip install genshin From github: pip install git+https://github.com/thesadru/genshin.py Requirements: Python 3.8+ aiohttp Pydantic Example A very simple example of how genshin.py would be used: import asyncio import genshin async def main (): cookies = { \"ltuid\" : 119480035 , \"ltoken\" : \"cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT\" } client = genshin . Client ( cookies ) data = await client . get_genshin_user ( 710785423 ) print ( f \"User has a total of { len ( data . characters ) } characters\" ) asyncio . run ( main ()) Genshin.py has been actively developed since 2021-02-06 . Please report any potential copyright violations to the owner through discord .","title":"Overview"},{"location":"#overview","text":"Modern API wrapper for Genshin Impact & Honkai Impact 3rd built on asyncio and pydantic . The primary focus of genshin.py is convenience. The entire project is fully type-hinted and abstracts a large amount of the api to be easier to use. Key features: All data is in the form of Pydantic Models which means full autocompletion and linter support. Requests are significantly faster thanks to proper usage of asyncio. Chinese and Engrish names returned by the API are renamed to simpler English fields. Supports the majority of the popular endpoints. Cleanly integrates with frameworks like FastAPI out of the box.","title":"Overview"},{"location":"#installation","text":"From PyPI: pip install genshin From github: pip install git+https://github.com/thesadru/genshin.py","title":"Installation"},{"location":"#requirements","text":"Python 3.8+ aiohttp Pydantic","title":"Requirements:"},{"location":"#example","text":"A very simple example of how genshin.py would be used: import asyncio import genshin async def main (): cookies = { \"ltuid\" : 119480035 , \"ltoken\" : \"cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT\" } client = genshin . Client ( cookies ) data = await client . get_genshin_user ( 710785423 ) print ( f \"User has a total of { len ( data . characters ) } characters\" ) asyncio . run ( main ()) Genshin.py has been actively developed since 2021-02-06 . Please report any potential copyright violations to the owner through discord .","title":"Example"},{"location":"authentication/","text":"Authentication Cookies Cookies are the default form of authentication over the majority of Mihoyo APIs. These are used in web events and hoyolab utilities such as the Battle Chronicle. The cookies used in these APIs are the same as the ones you use to log in to your hoyolab account and make payments. This means it's highly recommended to use your own cookies only for local testing and to create alt accounts for actual API requests. For authentication, you will need to send two cookies: ltuid and ltoken . ltuid is your hoyolab UID and ltoken is a unique token used for the actual authentication. Setting cookies There are several ways to set cookies but set_cookies is preferred. # set as an __init__ parameter client = genshin . Client ({ \"ltuid\" : ... , \"ltoken\" : ... }) # set dynamically client = genshin . Client () client . set_cookies ({ \"ltuid\" : ... , \"ltoken\" : ... }) # mapping client . set_cookies ( ltuid =... , ltoken =... ) # kwargs client . set_cookies ( \"ltuid=...; ltoken=...\" ) # cookie header How can I get my cookies? From the browser Go to hoyolab.com . Login to your account. Press F12 to open Inspect Mode (ie. Developer Tools). Go to Application , Cookies , https://www.hoyolab.com . Copy ltuid and ltoken . Using username and password Run python -m genshin login <account> <password> . Press the Login button and solve a captcha. Copy cookies. Setting cookies automatically For testing, you may want to use your own personal cookies. As long as you are logged into your account on one of your browsers, you can get these dynamically with genshin.utility.get_browser_cookies() . Installation pip install genshin[cookies,rsa] Example # set browser cookies client = genshin . Client () client . set_browser_cookies () # login with username and password client = genshin . Client () cookies = client . login_with_password ( \"me@gmail.com\" , \"EheTeNandayo\" ) print ( cookies ) In case of conflicts/errors, you may specify the browser you want to use. cookies = genshin . utility . get_browser_cookies ( \"chrome\" ) Details For some endpoints like redeem_code , you might need to set account_id and cookie_token cookies instead. You can get them by going to genshin.hoyoverse.com . If you know you will be redeeming gifts and also use other endpoints, you should \"complete\" your cookies before saving them in for example database with cookies = await genshin.complete_cookies(...) Authkey Authkeys are an alternative authentication used mostly for paginators like client.wish_history() and client.transaction_log() . They last only 24 hours, and it's impossible to do any write operations with them. That means authkeys, unlike cookies, are absolutely safe to share. These authkeys should always be a base64 encoded string and around 1024 characters long. Setting authkeys Similar to cookies, you may set authkeys through multiple ways. # set as an __init__ parameter client = genshin . Client ( authkey = \"...\" ) # set dynamically client . authkey = \"...\" Since authkeys are safe to share, all functions which use authkeys also accept them as a parameter. client = genshin . Client () async for wish in client . wish_history ( authkey = \"...\" ): pass How can I get my authkey? To get your authkey manually from other platforms, you can use any of these approaches: PC Open the wish history in the game and wait for it to load Open the file at ~\\AppData\\LocalLow\\miHoYo\\Genshin Impact\\output_log.txt Find the link which starts with OnGetWebViewPageFinish and copy it Android Open the Paimon menu Click Feedback Wait for it to load, and a feedback page should open Turn off your Wi-Fi Refresh the page The page should display an error containing a link Copy the link PS Open any event mail which contains a QR Code Scan the QR Code with your phone Copy the link You can only use this if you have an in-game mail with QR Code to open the web event After that, you can extract the authkey from the link using genshin.utility.extract_authkey . url = \"https://webstatic-sea.mihoyo.com/ys/event/im-service/index.html?...\" authkey = genshin . utility . extract_authkey ( url ) client = genshin . Client () client . authkey = authkey Setting authkeys automatically If you open a wish history or a wish details page in genshin, then the authkey will show up in your logfiles. It's possible to dynamically get the authkey using genshin.utility.get_authkey() . # get the authkey from a logfile client = genshin . Client () client . authkey = genshin . utility . get_authkey () # implicitly set the authkey client = genshin . Client () client . set_authkey ()","title":"Authentication"},{"location":"authentication/#authentication","text":"","title":"Authentication"},{"location":"authentication/#cookies","text":"Cookies are the default form of authentication over the majority of Mihoyo APIs. These are used in web events and hoyolab utilities such as the Battle Chronicle. The cookies used in these APIs are the same as the ones you use to log in to your hoyolab account and make payments. This means it's highly recommended to use your own cookies only for local testing and to create alt accounts for actual API requests. For authentication, you will need to send two cookies: ltuid and ltoken . ltuid is your hoyolab UID and ltoken is a unique token used for the actual authentication.","title":"Cookies"},{"location":"authentication/#setting-cookies","text":"There are several ways to set cookies but set_cookies is preferred. # set as an __init__ parameter client = genshin . Client ({ \"ltuid\" : ... , \"ltoken\" : ... }) # set dynamically client = genshin . Client () client . set_cookies ({ \"ltuid\" : ... , \"ltoken\" : ... }) # mapping client . set_cookies ( ltuid =... , ltoken =... ) # kwargs client . set_cookies ( \"ltuid=...; ltoken=...\" ) # cookie header","title":"Setting cookies"},{"location":"authentication/#how-can-i-get-my-cookies","text":"","title":"How can I get my cookies?"},{"location":"authentication/#from-the-browser","text":"Go to hoyolab.com . Login to your account. Press F12 to open Inspect Mode (ie. Developer Tools). Go to Application , Cookies , https://www.hoyolab.com . Copy ltuid and ltoken .","title":"From the browser"},{"location":"authentication/#using-username-and-password","text":"Run python -m genshin login <account> <password> . Press the Login button and solve a captcha. Copy cookies.","title":"Using username and password"},{"location":"authentication/#setting-cookies-automatically","text":"For testing, you may want to use your own personal cookies. As long as you are logged into your account on one of your browsers, you can get these dynamically with genshin.utility.get_browser_cookies() .","title":"Setting cookies automatically"},{"location":"authentication/#installation","text":"pip install genshin[cookies,rsa]","title":"Installation"},{"location":"authentication/#example","text":"# set browser cookies client = genshin . Client () client . set_browser_cookies () # login with username and password client = genshin . Client () cookies = client . login_with_password ( \"me@gmail.com\" , \"EheTeNandayo\" ) print ( cookies ) In case of conflicts/errors, you may specify the browser you want to use. cookies = genshin . utility . get_browser_cookies ( \"chrome\" )","title":"Example"},{"location":"authentication/#details","text":"For some endpoints like redeem_code , you might need to set account_id and cookie_token cookies instead. You can get them by going to genshin.hoyoverse.com . If you know you will be redeeming gifts and also use other endpoints, you should \"complete\" your cookies before saving them in for example database with cookies = await genshin.complete_cookies(...)","title":"Details"},{"location":"authentication/#authkey","text":"Authkeys are an alternative authentication used mostly for paginators like client.wish_history() and client.transaction_log() . They last only 24 hours, and it's impossible to do any write operations with them. That means authkeys, unlike cookies, are absolutely safe to share. These authkeys should always be a base64 encoded string and around 1024 characters long.","title":"Authkey"},{"location":"authentication/#setting-authkeys","text":"Similar to cookies, you may set authkeys through multiple ways. # set as an __init__ parameter client = genshin . Client ( authkey = \"...\" ) # set dynamically client . authkey = \"...\" Since authkeys are safe to share, all functions which use authkeys also accept them as a parameter. client = genshin . Client () async for wish in client . wish_history ( authkey = \"...\" ): pass","title":"Setting authkeys"},{"location":"authentication/#how-can-i-get-my-authkey","text":"To get your authkey manually from other platforms, you can use any of these approaches:","title":"How can I get my authkey?"},{"location":"authentication/#pc","text":"Open the wish history in the game and wait for it to load Open the file at ~\\AppData\\LocalLow\\miHoYo\\Genshin Impact\\output_log.txt Find the link which starts with OnGetWebViewPageFinish and copy it","title":"PC"},{"location":"authentication/#android","text":"Open the Paimon menu Click Feedback Wait for it to load, and a feedback page should open Turn off your Wi-Fi Refresh the page The page should display an error containing a link Copy the link","title":"Android"},{"location":"authentication/#ps","text":"Open any event mail which contains a QR Code Scan the QR Code with your phone Copy the link You can only use this if you have an in-game mail with QR Code to open the web event After that, you can extract the authkey from the link using genshin.utility.extract_authkey . url = \"https://webstatic-sea.mihoyo.com/ys/event/im-service/index.html?...\" authkey = genshin . utility . extract_authkey ( url ) client = genshin . Client () client . authkey = authkey","title":"PS"},{"location":"authentication/#setting-authkeys-automatically","text":"If you open a wish history or a wish details page in genshin, then the authkey will show up in your logfiles. It's possible to dynamically get the authkey using genshin.utility.get_authkey() . # get the authkey from a logfile client = genshin . Client () client . authkey = genshin . utility . get_authkey () # implicitly set the authkey client = genshin . Client () client . set_authkey ()","title":"Setting authkeys automatically"},{"location":"battle_chronicle/","text":"Battle Chronicle The main feature of genshin.py is the Battle Chronicle . It contains various features such as statistics, character equipment, spiral abyss runs, exploration progress, etc. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information. Quick example # get general user info: user = await client . get_genshin_user ( 710785423 ) user = await client . get_honkai_user ( 710785423 ) # get abyss: data = await client . get_spiral_abyss ( 710785423 , previous = True ) data = await client . get_honkai_abyss ( 710785423 ) Optimizations Some methods implicitly make multiple requests at once: instead of get_genshin_user you can use get_partial_genshin_user and get_characters instead of get_honkai_abyss you can use get_old_abyss or get_superstring_abyss user = await client . get_partial_genshin_user ( 710785423 ) print ( user . stats . days_active ) On the other hand, if you want to request as much information as possible, you should use get_full_genshin_user / get_full_honkai_user which adds spiral abyss runs and activities to the user. user = await client . get_full_genshin_user ( 710785423 ) print ( user . abyss . previous . total_stars )","title":"Battle Chronicle"},{"location":"battle_chronicle/#battle-chronicle","text":"The main feature of genshin.py is the Battle Chronicle . It contains various features such as statistics, character equipment, spiral abyss runs, exploration progress, etc. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Battle Chronicle"},{"location":"battle_chronicle/#quick-example","text":"# get general user info: user = await client . get_genshin_user ( 710785423 ) user = await client . get_honkai_user ( 710785423 ) # get abyss: data = await client . get_spiral_abyss ( 710785423 , previous = True ) data = await client . get_honkai_abyss ( 710785423 )","title":"Quick example"},{"location":"battle_chronicle/#optimizations","text":"Some methods implicitly make multiple requests at once: instead of get_genshin_user you can use get_partial_genshin_user and get_characters instead of get_honkai_abyss you can use get_old_abyss or get_superstring_abyss user = await client . get_partial_genshin_user ( 710785423 ) print ( user . stats . days_active ) On the other hand, if you want to request as much information as possible, you should use get_full_genshin_user / get_full_honkai_user which adds spiral abyss runs and activities to the user. user = await client . get_full_genshin_user ( 710785423 ) print ( user . abyss . previous . total_stars )","title":"Optimizations"},{"location":"caching/","text":"Caching Genshin.py caches data for you using a custom genshin.BaseCache object in client.cache . Quick example # create a cache client = genshin . Client () client . set_cache ( maxsize = 256 , ttl = 3600 ) # set a custom cache client . cache = genshin . StaticCache () Custom caches Sometimes a simple mutable mapping won't do, for example with redis caches. In this case you can overwrite the cache with your own. Example: import json import typing import genshin class JsonCache ( genshin . BaseCache ): \"\"\"Terrible json cache without any expiration.\"\"\" def __init__ ( self , filename ) -> None : self . filename = filename async def get ( self , key ): with open ( self . filename , \"r\" ) as file : data = json . load ( file ) return data . get ( str ( key )) async def set ( self , key , value ) -> None : with open ( self . filename , \"r\" ) as file : data = json . load ( file ) data [ str ( key )] = value with open ( self . filename , \"w\" ) as file : json . dump ( data , file ) async def get_static ( self , key ): return await self . get ( key ) async def set_static ( self , key , value ) -> None : await self . set ( key , value ) client . cache = JsonCache ( \"cache.json\" ) Redis cache A redis cache is provided by default with RedisCache . It is recommended to overwrite this class and modify the serialization methods since normal json may prove to be a bit too slow. import aioredis client . cache = genshin . RedisCache ( aioredis . Redis ( ... ))","title":"Caching"},{"location":"caching/#caching","text":"Genshin.py caches data for you using a custom genshin.BaseCache object in client.cache .","title":"Caching"},{"location":"caching/#quick-example","text":"# create a cache client = genshin . Client () client . set_cache ( maxsize = 256 , ttl = 3600 ) # set a custom cache client . cache = genshin . StaticCache ()","title":"Quick example"},{"location":"caching/#custom-caches","text":"Sometimes a simple mutable mapping won't do, for example with redis caches. In this case you can overwrite the cache with your own. Example: import json import typing import genshin class JsonCache ( genshin . BaseCache ): \"\"\"Terrible json cache without any expiration.\"\"\" def __init__ ( self , filename ) -> None : self . filename = filename async def get ( self , key ): with open ( self . filename , \"r\" ) as file : data = json . load ( file ) return data . get ( str ( key )) async def set ( self , key , value ) -> None : with open ( self . filename , \"r\" ) as file : data = json . load ( file ) data [ str ( key )] = value with open ( self . filename , \"w\" ) as file : json . dump ( data , file ) async def get_static ( self , key ): return await self . get ( key ) async def set_static ( self , key , value ) -> None : await self . set ( key , value ) client . cache = JsonCache ( \"cache.json\" )","title":"Custom caches"},{"location":"caching/#redis-cache","text":"A redis cache is provided by default with RedisCache . It is recommended to overwrite this class and modify the serialization methods since normal json may prove to be a bit too slow. import aioredis client . cache = genshin . RedisCache ( aioredis . Redis ( ... ))","title":"Redis cache"},{"location":"calculator/","text":"Enhancment Progress Calculator A wrapper around the Genshin Impact Enhancment Progress Calculator page. Contains a database of all characters, weapons and artifacts. Also the only way to recieve talents. To request many of the calculator endpoints you must first be logged in. Refer to the authentication section for more information. Quick Example # get a list of all characters characters = await client . get_calculator_characters () # get a list of all weapons weapons = await client . get_calculator_weapons () # get a list of all artifacts artifacts = await client . get_calculator_artifacts () # search for a specific character/weapon/artifact characters = await client . get_calculator_characters ( query = \"Xi\" ) # filter the returned characters/weapons/artifacts weapons = await client . get_calculator_weapons ( rarities = [ 5 , 4 ]) # get all talents of a character talents = await client . get_character_talents ( 10000002 ) # get all other artifacts in a set artifacts = await client . get_complete_artifact_set ( 7554 ) # get a list of synced characters # only returns the characters you have and ensures all level fields are provided characters = await client . get_calculator_characters ( sync = True ) # get the details of a character # includes their weapon, artifacts and talents details = await client . get_character_details ( 10000002 ) Example Of Calculation Basic Calculation The calculator uses builders to set data. All methods return self so they're chainable. # create a builder object builder = client . calculator () # calculate resoources needed to level up Hu Tao from lvl 1 to lvl 90 builder . set_character ( 10000046 , current = 1 , target = 90 ) # calculate the amount of resources needed for a Staff of Homa from level 20 to level 70 builder . set_weapon ( 13501 , current = 20 , target = 70 ) # execute the builder cost = await builder . calculate () print ( cost ) # you may also chain the builder (recommended) cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . set_weapon ( 13501 , current = 20 , target = 70 ) ) # calculate the amount needed for a 5* gladiator's nostalgia artifact_id = 7554 cost = await ( client . calculator () . add_artifact ( artifact_id , current = 0 , target = 20 ) ) # or calculate for a full set cost = await ( client . calculator () . set_artifact_set ( artifact_id , current = 0 , target = 20 ) ) Calculation based off a character If we assume we're calculating resources for the currently logged in user we can simply get their weapon and artifact levels directly. # Let's use the currently equipped weapon, artifacts and talents cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . with_current_weapon ( target = 70 ) . with_current_artifacts ( target = 20 ) # every artifact will be set to lvl 20 . with_current_talents ( target = 7 ) # every artifact will be set to lvl 7 ) # you may want to upgrade only specific talent or artifact types cost = await ( client . calculator () . set_character ( 10000046 , current = 80 , target = 90 ) # upgrade only the flower and feather . with_current_artifacts ( flower = 16 , feather = 20 ) # upgrade only the burst . with_current_talents ( burst = 10 ) )","title":"Enhancment Progress Calculator"},{"location":"calculator/#enhancment-progress-calculator","text":"A wrapper around the Genshin Impact Enhancment Progress Calculator page. Contains a database of all characters, weapons and artifacts. Also the only way to recieve talents. To request many of the calculator endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Enhancment Progress Calculator"},{"location":"calculator/#quick-example","text":"# get a list of all characters characters = await client . get_calculator_characters () # get a list of all weapons weapons = await client . get_calculator_weapons () # get a list of all artifacts artifacts = await client . get_calculator_artifacts () # search for a specific character/weapon/artifact characters = await client . get_calculator_characters ( query = \"Xi\" ) # filter the returned characters/weapons/artifacts weapons = await client . get_calculator_weapons ( rarities = [ 5 , 4 ]) # get all talents of a character talents = await client . get_character_talents ( 10000002 ) # get all other artifacts in a set artifacts = await client . get_complete_artifact_set ( 7554 ) # get a list of synced characters # only returns the characters you have and ensures all level fields are provided characters = await client . get_calculator_characters ( sync = True ) # get the details of a character # includes their weapon, artifacts and talents details = await client . get_character_details ( 10000002 )","title":"Quick Example"},{"location":"calculator/#example-of-calculation","text":"","title":"Example Of Calculation"},{"location":"calculator/#basic-calculation","text":"The calculator uses builders to set data. All methods return self so they're chainable. # create a builder object builder = client . calculator () # calculate resoources needed to level up Hu Tao from lvl 1 to lvl 90 builder . set_character ( 10000046 , current = 1 , target = 90 ) # calculate the amount of resources needed for a Staff of Homa from level 20 to level 70 builder . set_weapon ( 13501 , current = 20 , target = 70 ) # execute the builder cost = await builder . calculate () print ( cost ) # you may also chain the builder (recommended) cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . set_weapon ( 13501 , current = 20 , target = 70 ) ) # calculate the amount needed for a 5* gladiator's nostalgia artifact_id = 7554 cost = await ( client . calculator () . add_artifact ( artifact_id , current = 0 , target = 20 ) ) # or calculate for a full set cost = await ( client . calculator () . set_artifact_set ( artifact_id , current = 0 , target = 20 ) )","title":"Basic Calculation"},{"location":"calculator/#calculation-based-off-a-character","text":"If we assume we're calculating resources for the currently logged in user we can simply get their weapon and artifact levels directly. # Let's use the currently equipped weapon, artifacts and talents cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . with_current_weapon ( target = 70 ) . with_current_artifacts ( target = 20 ) # every artifact will be set to lvl 20 . with_current_talents ( target = 7 ) # every artifact will be set to lvl 7 ) # you may want to upgrade only specific talent or artifact types cost = await ( client . calculator () . set_character ( 10000046 , current = 80 , target = 90 ) # upgrade only the flower and feather . with_current_artifacts ( flower = 16 , feather = 20 ) # upgrade only the burst . with_current_talents ( burst = 10 ) )","title":"Calculation based off a character"},{"location":"cli/","text":"CLI Genshin.py is not only a library but also a CLI app. Authentication is required for most commands. Cookies can be provided either through --cookies \"ltoken=...; ltuid=...\" or gotten implicitly from the browser. Installation pip install genshin[cli] Usage Get help $ python -m genshin --help Usage: python -m genshin [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: accounts Get all of your genshin accounts. banner-ids Get the banner ids from logs. genshin Genshin-related commands. honkai Honkai-related commands. lineups Show popular genshin lineups. login Login with a password. pity Calculate the amount of pulls until pity. wishes Show a nicely formatted wish history. Run a command $ python -m genshin genshin stats 710785423 User stats of 710785423 Stats: Achievements: 436 Days Active: 464 Characters: 33 Waypoints Unlocked: 169 Domains Unlocked: 33 Anemoculi: 66 Geoculi: 131 Electroculi: 180 Common Chests Opened: 1162 Exquisite Chests Opened: 924 Precious Chests Opened: 262 Luxurious Chests Opened: 106 Remarkable Chests Opened: 42 Explorations: Enkanomiya: explored 67.9% | Offering level 0 Inazuma: explored 98.1% | Reputation level 10 Dragonspine: explored 96.1% | Offering level 12 Liyue: explored 93.5% | Reputation level 8 Mondstadt: explored 100.0% | Reputation level 8 Teapot: level 10 | comfort 21220 (Fit for a King) Unlocked realms: Floating Abode, Emerald Peak, Cool Isle","title":"CLI"},{"location":"cli/#cli","text":"Genshin.py is not only a library but also a CLI app. Authentication is required for most commands. Cookies can be provided either through --cookies \"ltoken=...; ltuid=...\" or gotten implicitly from the browser.","title":"CLI"},{"location":"cli/#installation","text":"pip install genshin[cli]","title":"Installation"},{"location":"cli/#usage","text":"","title":"Usage"},{"location":"cli/#get-help","text":"$ python -m genshin --help Usage: python -m genshin [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: accounts Get all of your genshin accounts. banner-ids Get the banner ids from logs. genshin Genshin-related commands. honkai Honkai-related commands. lineups Show popular genshin lineups. login Login with a password. pity Calculate the amount of pulls until pity. wishes Show a nicely formatted wish history.","title":"Get help"},{"location":"cli/#run-a-command","text":"$ python -m genshin genshin stats 710785423 User stats of 710785423 Stats: Achievements: 436 Days Active: 464 Characters: 33 Waypoints Unlocked: 169 Domains Unlocked: 33 Anemoculi: 66 Geoculi: 131 Electroculi: 180 Common Chests Opened: 1162 Exquisite Chests Opened: 924 Precious Chests Opened: 262 Luxurious Chests Opened: 106 Remarkable Chests Opened: 42 Explorations: Enkanomiya: explored 67.9% | Offering level 0 Inazuma: explored 98.1% | Reputation level 10 Dragonspine: explored 96.1% | Offering level 12 Liyue: explored 93.5% | Reputation level 8 Mondstadt: explored 100.0% | Reputation level 8 Teapot: level 10 | comfort 21220 (Fit for a King) Unlocked realms: Floating Abode, Emerald Peak, Cool Isle","title":"Run a command"},{"location":"configuration/","text":"Configuration Language The API supports several languages. You can set what language you want the response to be in by either changing the client language client.lang or passing the language as a method argument. The default language is en-us for overseas and zh-cn for china. client = genshin . Client ( lang = \"fr-fr\" ) # or client = genshin . Client () user = await client . get_genshin_user ( 710785423 , lang = \"zh-cn\" ) Supported Languages Code Language de-de Deutsch en-us English es-es Espa\u00f1ol fr-fr Fran\u00e7ais id-id Indonesia ja-jp \u65e5\u672c\u8a9e ko-kr \ud55c\uad6d\uc5b4 pt-pt Portugu\u00eas ru-ru P\u0443\u0441\u0441\u043a\u0438\u0439 th-th \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 vi-vn Ti\u1ebfng Vi\u1ec7t zh-cn \u7b80\u4f53\u4e2d\u6587 zh-tw \u7e41\u9ad4\u4e2d\u6587 This mapping is contained in genshin.LANGS Character Name Language Some genshin endpoints fail to return character names. Genshin.py therefore fetches character names from a 3rd party database. By default the enka repository is used but others can be chosen. These functions only need to be ran once on startup. Function Source Notes await genshin.utility.update_characters_genshindata() GenshinData Source of data for all other 3rd party services, has to downloads >20MB per language to be used await genshin.utility.update_characters_enka() EnkaNetwork Repository updates take a while, not reliable right after a genshin update await genshin.utility.update_characters_ambr() Project Amber Uses a 3rd party API that may be subject to change, does a unique request for every language Cookie Manager By default Client uses a single cookie. This behavior may be changed by overwriting client.cookie_manager with a subclass of BaseCookieManager . For convenience, if a list of cookies is passed into Client.set_cookies the cookie manager will be automatically set to genshin.RotatingCookieManager . Example import genshin class RandomCookieManager ( genshin . BaseCookieManager ): \"\"\"Cookie Manager that provides random cookies fetched from a database.\"\"\" def __init__ ( self , database ): self . database = database async def request ( self , url , * , method = \"GET\" , ** kwargs ): cookies = await self . database . get_random_cookies () return await self . _request ( method , url , cookies = cookies , ** kwargs ) International Cookie Manager When providing data for both cn and os players you might want to share the same client for them and in extension things like the cache. To achieve that you have to set cookies for all regions with InternationalCookieManager . client . cookie_manager = genshin . InternationalCookieManager ({ genshin . Region . OVESEAS : [{ ... }, ... ], genshin . Region . CHINESE : [{ ... }, ... ], }) Cached UIDs Some endpoints require a uid despite being private. Genshin.py chooses to fetch and cache these uids instead of forcing users to provide it themselves. This may however cause some obvious performance issues, so it is recommended to set the uids yourself in case you cannot afford to always have an extra delay when creating a new client. client = genshin . Client ( game = genshin . Game . GENSHIN ) client . uid = 710785423 You can set a UID for a specific game if there's no default game set. client . uids [ genshin . Game . GENSHIN ] = 710785423 client . uids [ genshin . Game . HONKAI ] = 200476231 Default Region By default all requests will be assumed to be meant to be used with overseas cookies. If you wish to use chinese cookies and chinese endpoints you must change the default region. client = genshin . Client ( region = genshin . Region . CHINESE ) client . region = genshin . Region . CHINESE Default Game Some endpoints may be the exact same for both genshin and honkai so they require a game to be specified. This can be also done by setting a default game for the client. client = genshin . Client ( game = genshin . Game . HONKAI ) client . default_game = genshin . Game . HONKAI Proxy Some endpoints may block chinese IPs. Setting up a proxy in this case is recommended. For more information, check out the aiohttp docs . client = genshin . Client ( proxy = \"http://127.0.0.1:1080\" ) client . proxy = \"http://127.0.0.1:1080\"","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#language","text":"The API supports several languages. You can set what language you want the response to be in by either changing the client language client.lang or passing the language as a method argument. The default language is en-us for overseas and zh-cn for china. client = genshin . Client ( lang = \"fr-fr\" ) # or client = genshin . Client () user = await client . get_genshin_user ( 710785423 , lang = \"zh-cn\" )","title":"Language"},{"location":"configuration/#supported-languages","text":"Code Language de-de Deutsch en-us English es-es Espa\u00f1ol fr-fr Fran\u00e7ais id-id Indonesia ja-jp \u65e5\u672c\u8a9e ko-kr \ud55c\uad6d\uc5b4 pt-pt Portugu\u00eas ru-ru P\u0443\u0441\u0441\u043a\u0438\u0439 th-th \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 vi-vn Ti\u1ebfng Vi\u1ec7t zh-cn \u7b80\u4f53\u4e2d\u6587 zh-tw \u7e41\u9ad4\u4e2d\u6587 This mapping is contained in genshin.LANGS","title":"Supported Languages"},{"location":"configuration/#character-name-language","text":"Some genshin endpoints fail to return character names. Genshin.py therefore fetches character names from a 3rd party database. By default the enka repository is used but others can be chosen. These functions only need to be ran once on startup. Function Source Notes await genshin.utility.update_characters_genshindata() GenshinData Source of data for all other 3rd party services, has to downloads >20MB per language to be used await genshin.utility.update_characters_enka() EnkaNetwork Repository updates take a while, not reliable right after a genshin update await genshin.utility.update_characters_ambr() Project Amber Uses a 3rd party API that may be subject to change, does a unique request for every language","title":"Character Name Language"},{"location":"configuration/#cookie-manager","text":"By default Client uses a single cookie. This behavior may be changed by overwriting client.cookie_manager with a subclass of BaseCookieManager . For convenience, if a list of cookies is passed into Client.set_cookies the cookie manager will be automatically set to genshin.RotatingCookieManager .","title":"Cookie Manager"},{"location":"configuration/#example","text":"import genshin class RandomCookieManager ( genshin . BaseCookieManager ): \"\"\"Cookie Manager that provides random cookies fetched from a database.\"\"\" def __init__ ( self , database ): self . database = database async def request ( self , url , * , method = \"GET\" , ** kwargs ): cookies = await self . database . get_random_cookies () return await self . _request ( method , url , cookies = cookies , ** kwargs )","title":"Example"},{"location":"configuration/#international-cookie-manager","text":"When providing data for both cn and os players you might want to share the same client for them and in extension things like the cache. To achieve that you have to set cookies for all regions with InternationalCookieManager . client . cookie_manager = genshin . InternationalCookieManager ({ genshin . Region . OVESEAS : [{ ... }, ... ], genshin . Region . CHINESE : [{ ... }, ... ], })","title":"International Cookie Manager"},{"location":"configuration/#cached-uids","text":"Some endpoints require a uid despite being private. Genshin.py chooses to fetch and cache these uids instead of forcing users to provide it themselves. This may however cause some obvious performance issues, so it is recommended to set the uids yourself in case you cannot afford to always have an extra delay when creating a new client. client = genshin . Client ( game = genshin . Game . GENSHIN ) client . uid = 710785423 You can set a UID for a specific game if there's no default game set. client . uids [ genshin . Game . GENSHIN ] = 710785423 client . uids [ genshin . Game . HONKAI ] = 200476231","title":"Cached UIDs"},{"location":"configuration/#default-region","text":"By default all requests will be assumed to be meant to be used with overseas cookies. If you wish to use chinese cookies and chinese endpoints you must change the default region. client = genshin . Client ( region = genshin . Region . CHINESE ) client . region = genshin . Region . CHINESE","title":"Default Region"},{"location":"configuration/#default-game","text":"Some endpoints may be the exact same for both genshin and honkai so they require a game to be specified. This can be also done by setting a default game for the client. client = genshin . Client ( game = genshin . Game . HONKAI ) client . default_game = genshin . Game . HONKAI","title":"Default Game"},{"location":"configuration/#proxy","text":"Some endpoints may block chinese IPs. Setting up a proxy in this case is recommended. For more information, check out the aiohttp docs . client = genshin . Client ( proxy = \"http://127.0.0.1:1080\" ) client . proxy = \"http://127.0.0.1:1080\"","title":"Proxy"},{"location":"credits/","text":"Credits Thanks to these amazing people genshin.py can be where it is now: Hoyo API Contributors Womsxd : The author of YuanShen User Info - a predecesor to genshinstats Lightczx : The author of Snap.Genshin , helped me figure out the chinese endpoints lulu666lulu : Figured out how the chinese dynamic secret is generated M-307 : Worked on geetest authentication. Genshin.py Contributors Chromosomologist : Helped with honkai endpoints. Pokurt : Helped with capturing the requests coming from the hoyolab android app. GrassSand & molehzy : Provided me with working chinese cookies to test chinese endpoints. Ashlen : me :^) Feedback KT : Developer of \u539f\u795e\u5c0f\u5e6b\u624b . Seria : Developer of \u7533\u9db4 . Konard : Developer of Raiden. GauvraM : Translator of \u539f\u795e\u5c0f\u5e6b\u624b .","title":"Credits"},{"location":"credits/#credits","text":"Thanks to these amazing people genshin.py can be where it is now:","title":"Credits"},{"location":"credits/#hoyo-api-contributors","text":"Womsxd : The author of YuanShen User Info - a predecesor to genshinstats Lightczx : The author of Snap.Genshin , helped me figure out the chinese endpoints lulu666lulu : Figured out how the chinese dynamic secret is generated M-307 : Worked on geetest authentication.","title":"Hoyo API Contributors"},{"location":"credits/#genshinpy-contributors","text":"Chromosomologist : Helped with honkai endpoints. Pokurt : Helped with capturing the requests coming from the hoyolab android app. GrassSand & molehzy : Provided me with working chinese cookies to test chinese endpoints. Ashlen : me :^)","title":"Genshin.py Contributors"},{"location":"credits/#feedback","text":"KT : Developer of \u539f\u795e\u5c0f\u5e6b\u624b . Seria : Developer of \u7533\u9db4 . Konard : Developer of Raiden. GauvraM : Translator of \u539f\u795e\u5c0f\u5e6b\u624b .","title":"Feedback"},{"location":"daily_rewards/","text":"Daily Rewards Since hoyo forces users to claim their daily rewards through the website we can abuse that system and claim rewards automatically. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information. These endpoints require a game to be specified. It's best to configure the default game or use the game= parameter. Quick Example # claim daily reward try : reward = await client . claim_daily_reward () except genshin . AlreadyClaimed : print ( \"Daily reward already claimed\" ) else : print ( f \"Claimed { reward . amount } x { reward . name } \" ) # get all claimed rewards async for reward in client . claimed_rewards (): print ( f \" { reward . time } - { reward . amount } x { reward . name } \" ) # get info about the current daily reward status signed_in , claimed_rewards = await client . get_reward_info () print ( f \"Signed in: { signed_in } | Total claimed rewards: { claimed_rewards } \" ) Optimizations Under the hood, client.claim_daily_reward makes an additional request to get the claimed reward. If you don't want that you may disable the extra request with client.claim_daily_reward(reward=False)","title":"Daily Rewards"},{"location":"daily_rewards/#daily-rewards","text":"Since hoyo forces users to claim their daily rewards through the website we can abuse that system and claim rewards automatically. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information. These endpoints require a game to be specified. It's best to configure the default game or use the game= parameter.","title":"Daily Rewards"},{"location":"daily_rewards/#quick-example","text":"# claim daily reward try : reward = await client . claim_daily_reward () except genshin . AlreadyClaimed : print ( \"Daily reward already claimed\" ) else : print ( f \"Claimed { reward . amount } x { reward . name } \" ) # get all claimed rewards async for reward in client . claimed_rewards (): print ( f \" { reward . time } - { reward . amount } x { reward . name } \" ) # get info about the current daily reward status signed_in , claimed_rewards = await client . get_reward_info () print ( f \"Signed in: { signed_in } | Total claimed rewards: { claimed_rewards } \" )","title":"Quick Example"},{"location":"daily_rewards/#optimizations","text":"Under the hood, client.claim_daily_reward makes an additional request to get the claimed reward. If you don't want that you may disable the extra request with client.claim_daily_reward(reward=False)","title":"Optimizations"},{"location":"debugging/","text":"Debugging Interactive console Since genshin.py uses asyncio it's fairly hard to debug code in the interactive console. Instead, I highly recommend you to use IPython . Requests Genshin.py automatically logs all requests using the logging module. You can make these logs show up in the console by setting the debug kwarg to True In [1]: client = genshin.Client({...}, debug=True) In [2]: user = await client.get_genshin_user(710785423) DEBUG:genshin.client.components.base:GET https://webstatic-sea.mihoyo.com/admin/mi18n/bbs_cn/m11241040191111/m11241040191111-en-us.json DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/index?role_id=710785423&server=os_euro DEBUG:genshin.client.components.base:POST https://bbs-api-os.hoyolab.com/game_record/genshin/api/character {\"role_id\":710785423,\"server\":\"os_euro\"} DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/spiralAbyss?schedule_type=1&role_id=710785423&server=os_euro DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/spiralAbyss?schedule_type=2&role_id=710785423&server=os_euro DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/activities?role_id=710785423&server=os_euro","title":"Debugging"},{"location":"debugging/#debugging","text":"","title":"Debugging"},{"location":"debugging/#interactive-console","text":"Since genshin.py uses asyncio it's fairly hard to debug code in the interactive console. Instead, I highly recommend you to use IPython .","title":"Interactive console"},{"location":"debugging/#requests","text":"Genshin.py automatically logs all requests using the logging module. You can make these logs show up in the console by setting the debug kwarg to True In [1]: client = genshin.Client({...}, debug=True) In [2]: user = await client.get_genshin_user(710785423) DEBUG:genshin.client.components.base:GET https://webstatic-sea.mihoyo.com/admin/mi18n/bbs_cn/m11241040191111/m11241040191111-en-us.json DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/index?role_id=710785423&server=os_euro DEBUG:genshin.client.components.base:POST https://bbs-api-os.hoyolab.com/game_record/genshin/api/character {\"role_id\":710785423,\"server\":\"os_euro\"} DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/spiralAbyss?schedule_type=1&role_id=710785423&server=os_euro DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/spiralAbyss?schedule_type=2&role_id=710785423&server=os_euro DEBUG:genshin.client.components.base:GET https://bbs-api-os.hoyolab.com/game_record/genshin/api/activities?role_id=710785423&server=os_euro","title":"Requests"},{"location":"diary/","text":"Traveler's Diary Contains statistics of earned primogems and mora in the last 3 months. To request any of the diary endpoints you must first be logged in. Refer to the authentication section for more information. Quick Example # get the diary diary = await client . get_diary () print ( f \"Primogems earned this month: { diary . data . current_primogems } \" ) for category in diary . data . categories : print ( f \" { category . percentage } % earned from { category . name } ( { category . amount } primogems)\" ) # get the log of actions which earned primogems async for action in client . diary_log ( limit = 50 ): print ( f \" { action . action } - { action . amount } primogems\" ) # get the diary log for mora async for action in client . diary_log ( limit = 50 , type = genshin . models . DiaryType . MORA ): print ( f \" { action . action } - { action . amount } mora\" )","title":"Traveler's Diary"},{"location":"diary/#travelers-diary","text":"Contains statistics of earned primogems and mora in the last 3 months. To request any of the diary endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Traveler's Diary"},{"location":"diary/#quick-example","text":"# get the diary diary = await client . get_diary () print ( f \"Primogems earned this month: { diary . data . current_primogems } \" ) for category in diary . data . categories : print ( f \" { category . percentage } % earned from { category . name } ( { category . amount } primogems)\" ) # get the log of actions which earned primogems async for action in client . diary_log ( limit = 50 ): print ( f \" { action . action } - { action . amount } primogems\" ) # get the diary log for mora async for action in client . diary_log ( limit = 50 , type = genshin . models . DiaryType . MORA ): print ( f \" { action . action } - { action . amount } mora\" )","title":"Quick Example"},{"location":"hoyolab/","text":"Hoyolab Since the api genshin.py is requesting is made primarily for hoyolab some minor utility functions related to it are also supported. Quick example # get the uid, nickname and level of a user from a hoyolab uid card = await client . get_record_card ( 8366222 ) print ( card . uid , card . level , card . nickname ) # list of all game accounts of the currently logged-in user accounts = await client . get_game_accounts () for account in accounts : print ( account . uid , account . level , account . nickname ) # redeem a gift code for the currently logged-in user await client . redeem_code ( \"GENSHINGIFT\" ) # search users users = await client . search_users ( \"sadru\" ) print ( users [ 0 ] . hoyolab_id ) # get a list of random recommended users (useful for data gathering) users = await client . get_recommended_users () print ( users [ 0 ] . hoyolab_id ) # to actually get any useful data: card = await client . get_record_card ( users [ 0 ] . hoyolab_id )","title":"Hoyolab"},{"location":"hoyolab/#hoyolab","text":"Since the api genshin.py is requesting is made primarily for hoyolab some minor utility functions related to it are also supported.","title":"Hoyolab"},{"location":"hoyolab/#quick-example","text":"# get the uid, nickname and level of a user from a hoyolab uid card = await client . get_record_card ( 8366222 ) print ( card . uid , card . level , card . nickname ) # list of all game accounts of the currently logged-in user accounts = await client . get_game_accounts () for account in accounts : print ( account . uid , account . level , account . nickname ) # redeem a gift code for the currently logged-in user await client . redeem_code ( \"GENSHINGIFT\" ) # search users users = await client . search_users ( \"sadru\" ) print ( users [ 0 ] . hoyolab_id ) # get a list of random recommended users (useful for data gathering) users = await client . get_recommended_users () print ( users [ 0 ] . hoyolab_id ) # to actually get any useful data: card = await client . get_record_card ( users [ 0 ] . hoyolab_id )","title":"Quick example"},{"location":"lineup/","text":"Lineup Contains recommended character builds and teams for world exploration and domains. To request many of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information. Quick Example # get scenarios scenarios = await client . get_lineup_scenarios () # get lineups lineups = await client . get_lineups ( scenarios . abyss . spire , limit = 20 ) # get lineup details lineup = await client . get_lineup_details ( lineups [ 0 ] . id ) # get further field info of lineups lineup = await client . get_lineup_fields () Some scenario ids: name id World Exploration 1 Trounce Domains 3 Domain Challenges 9 Boss Battles 24 Spiral Abyss 2 Abyssal Moon Spire 41 Partial data of get_lineup_fields","title":"Lineup"},{"location":"lineup/#lineup","text":"Contains recommended character builds and teams for world exploration and domains. To request many of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Lineup"},{"location":"lineup/#quick-example","text":"# get scenarios scenarios = await client . get_lineup_scenarios () # get lineups lineups = await client . get_lineups ( scenarios . abyss . spire , limit = 20 ) # get lineup details lineup = await client . get_lineup_details ( lineups [ 0 ] . id ) # get further field info of lineups lineup = await client . get_lineup_fields () Some scenario ids: name id World Exploration 1 Trounce Domains 3 Domain Challenges 9 Boss Battles 24 Spiral Abyss 2 Abyssal Moon Spire 41 Partial data of get_lineup_fields","title":"Quick Example"},{"location":"transactions/","text":"Transactions Contains logs of changes to primogems, crystals, resin, artifacts and weapons. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information. Transaction kinds: kind item description primogem Primogem rewards from daily commissions and events crystal Crystals gotten from top-up purchases resin Resin lost by claiming boss/domain/leyline rewards artifact Artifacts gained from domains or used as level up material weapon Weapons gained from wishes or used as level up material This enum is contained in genshin.models.TransactionKind Quick example # iterate over the logs for primogems async for trans in client . transaction_log ( \"primogem\" ): print ( trans ) # set a limit for the iteration async for trans in client . transaction_log ( \"primogem\" , limit = 100 ): print ( trans ) # get and flatten the logs for resin log = await client . transaction_log ( \"resin\" , limit = 100 ) . flatten () print ( log [ - 1 ] . time ) # get the first log for artifacts trans = await client . transaction_log ( \"artifact\" ) . first () print ( trans . name ) # get multiple transaction kinds combined together async for trans in client . transaction_log ([ \"artifact\" , \"weapon\" ]): print ( trans ) # get all transaction kinds combined together async for trans in client . transaction_log ( limit = 20 ): print ( trans )","title":"Transactions"},{"location":"transactions/#transactions","text":"Contains logs of changes to primogems, crystals, resin, artifacts and weapons. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information. Transaction kinds: kind item description primogem Primogem rewards from daily commissions and events crystal Crystals gotten from top-up purchases resin Resin lost by claiming boss/domain/leyline rewards artifact Artifacts gained from domains or used as level up material weapon Weapons gained from wishes or used as level up material This enum is contained in genshin.models.TransactionKind","title":"Transactions"},{"location":"transactions/#quick-example","text":"# iterate over the logs for primogems async for trans in client . transaction_log ( \"primogem\" ): print ( trans ) # set a limit for the iteration async for trans in client . transaction_log ( \"primogem\" , limit = 100 ): print ( trans ) # get and flatten the logs for resin log = await client . transaction_log ( \"resin\" , limit = 100 ) . flatten () print ( log [ - 1 ] . time ) # get the first log for artifacts trans = await client . transaction_log ( \"artifact\" ) . first () print ( trans . name ) # get multiple transaction kinds combined together async for trans in client . transaction_log ([ \"artifact\" , \"weapon\" ]): print ( trans ) # get all transaction kinds combined together async for trans in client . transaction_log ( limit = 20 ): print ( trans )","title":"Quick example"},{"location":"wish_history/","text":"Wish History Contains the wish history and banner details. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information. Quick example # simply iterate over the wish history async for wish in client . wish_history (): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # set a limit for the iteration async for wish in client . wish_history ( limit = 100 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get and flatten the wish history history = await client . wish_history ( limit = 100 ) . flatten () print ( history [ - 1 ] . time ) # get the first wish in the paginator (most recent one) wish = await client . wish_history () . next () print ( wish . uid ) Filtering data by banner By default client.wish_history() gets data from all banners, you can filter the results by passing in a banner id. You may also call client.get_banner_names() to get the banner names in various languages. Banner ID Novice Wishes 100 Permanent Wish 200 Character Event Wish 301 Weapon Event Wish 302 This enum is contained in genshin.models.BannerType # get wishes only from the standard permanent banner async for wish in client . wish_history ( genshin . models . BannerType . STANDARD , limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get wishes from both the character and the weapon banner async for wish in client . wish_history ([ 301 , 302 ], limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) Banner Details In the same way you can get data for your wish history you may also get data for the static banner details. Quick example # get all the current banners banners = await client . get_banner_details () for banner in banners : print ( banner . name ) # get a list of all items that can be gotten from the gacha items = await client . get_gacha_items () Optimizations You may start from any point in the paginator as long as you know the id of the previous item. async for wish in client . wish_history ( limit = 20 ): print ( wish ) async for wish in client . wish_history ( limit = 20 , end_id = wish . id ): print ( wish ) get_banner_details requires ids to get the banner details. These ids change with every new banner so for user experience they are hosted on a remote repository maintained by me. You may get them yourself by opening every single details page in genshin and then running genshin.get_banner_ids() banner_ids = genshin . get_banner_ids () banners = await client . get_banner_details ( banner_ids )","title":"Wish History"},{"location":"wish_history/#wish-history","text":"Contains the wish history and banner details. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information.","title":"Wish History"},{"location":"wish_history/#quick-example","text":"# simply iterate over the wish history async for wish in client . wish_history (): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # set a limit for the iteration async for wish in client . wish_history ( limit = 100 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get and flatten the wish history history = await client . wish_history ( limit = 100 ) . flatten () print ( history [ - 1 ] . time ) # get the first wish in the paginator (most recent one) wish = await client . wish_history () . next () print ( wish . uid )","title":"Quick example"},{"location":"wish_history/#filtering-data-by-banner","text":"By default client.wish_history() gets data from all banners, you can filter the results by passing in a banner id. You may also call client.get_banner_names() to get the banner names in various languages. Banner ID Novice Wishes 100 Permanent Wish 200 Character Event Wish 301 Weapon Event Wish 302 This enum is contained in genshin.models.BannerType # get wishes only from the standard permanent banner async for wish in client . wish_history ( genshin . models . BannerType . STANDARD , limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get wishes from both the character and the weapon banner async for wish in client . wish_history ([ 301 , 302 ], limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" )","title":"Filtering data by banner"},{"location":"wish_history/#banner-details","text":"In the same way you can get data for your wish history you may also get data for the static banner details.","title":"Banner Details"},{"location":"wish_history/#quick-example_1","text":"# get all the current banners banners = await client . get_banner_details () for banner in banners : print ( banner . name ) # get a list of all items that can be gotten from the gacha items = await client . get_gacha_items ()","title":"Quick example"},{"location":"wish_history/#optimizations","text":"You may start from any point in the paginator as long as you know the id of the previous item. async for wish in client . wish_history ( limit = 20 ): print ( wish ) async for wish in client . wish_history ( limit = 20 , end_id = wish . id ): print ( wish ) get_banner_details requires ids to get the banner details. These ids change with every new banner so for user experience they are hosted on a remote repository maintained by me. You may get them yourself by opening every single details page in genshin and then running genshin.get_banner_ids() banner_ids = genshin . get_banner_ids () banners = await client . get_banner_details ( banner_ids )","title":"Optimizations"}]}